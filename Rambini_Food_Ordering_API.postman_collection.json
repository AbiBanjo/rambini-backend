{
	"info": {
		"_postman_id": "rambini-food-ordering-api",
		"name": "Rambini Food Ordering API",
		"description": "Complete API collection for Rambini Food Ordering Platform with authentication, user management, menu, orders, cart, and vendor operations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "rambini-api"
	},
	"item": [
		{
			"name": "üè• Health & Status",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					},
					"response": []
				},
				{
					"name": "App Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": ["{{base_url}}"],
							"path": [""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has OTP ID\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.otpId).to.be.a('string');",
									"    pm.collectionVariables.set('otp_id', response.otpId);",
									"    pm.collectionVariables.set('phone_number', pm.request.body.raw.phoneNumber);",
									"    console.log('OTP ID saved:', response.otpId);",
									"    console.log('Phone number saved:', pm.request.body.raw.phoneNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phoneNumber\": \"+2348012345678\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["auth", "register"]
						}
					},
					"response": []
				},
				{
					"name": "Verify OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has tokens\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.tokens).to.be.an('object');",
									"    pm.expect(response.tokens.accessToken).to.be.a('string');",
									"    pm.expect(response.tokens.refreshToken).to.be.a('string');",
									"    pm.collectionVariables.set('access_token', response.tokens.accessToken);",
									"    pm.collectionVariables.set('refresh_token', response.tokens.refreshToken);",
									"    pm.collectionVariables.set('user_id', response.user.id);",
									"    pm.collectionVariables.set('user_type', response.user.userType);",
									"    console.log('Access token saved:', response.tokens.accessToken);",
									"    console.log('User ID saved:', response.user.id);",
									"    console.log('User type saved:', response.user.userType);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"otpId\": \"{{otp_id}}\",\n  \"otpCode\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/verify-otp",
							"host": ["{{base_url}}"],
							"path": ["auth", "verify-otp"]
						}
					},
					"response": []
				},
				{
					"name": "Complete Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile completed successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.user.profileCompleted).to.be.true;",
									"    console.log('Profile completed for user:', response.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"address\": {\n    \"address_line_1\": \"123 Main Street\",\n    \"city\": \"Lagos\",\n    \"state\": \"Lagos\",\n    \"postal_code\": \"100001\",\n    \"country\": \"NG\",\n    \"latitude\": 6.5244,\n    \"longitude\": 3.3792,\n    \"is_default\": true\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/complete-profile",
							"host": ["{{base_url}}"],
							"path": ["auth", "complete-profile"]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has OTP ID\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.otpId).to.be.a('string');",
									"    pm.collectionVariables.set('login_otp_id', response.otpId);",
									"    console.log('Login OTP ID saved:', response.otpId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phoneNumber\": \"{{phone_number}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					},
					"response": []
				},
				{
					"name": "Resend OTP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"otpId\": \"{{otp_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/resend-otp",
							"host": ["{{base_url}}"],
							"path": ["auth", "resend-otp"]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New access token received\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.accessToken).to.be.a('string');",
									"    pm.collectionVariables.set('access_token', response.accessToken);",
									"    console.log('New access token saved:', response.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh-token",
							"host": ["{{base_url}}"],
							"path": ["auth", "refresh-token"]
						}
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User information returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.phoneNumber).to.be.a('string');",
									"    pm.expect(response.userType).to.be.a('string');",
									"    console.log('Current user:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/me",
							"host": ["{{base_url}}"],
							"path": ["auth", "me"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë§ User Management",
			"item": [
				{
					"name": "Get Current User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User profile returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.phone_number).to.be.a('string');",
									"    console.log('User profile:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/profile",
							"host": ["{{base_url}}"],
							"path": ["users", "profile"]
						}
					},
					"response": []
				},
				{
					"name": "Update Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User updated successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.first_name).to.equal('John Updated');",
									"    pm.expect(response.last_name).to.equal('Doe Updated');",
									"    console.log('User updated:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe Updated\",\n  \"email\": \"john.updated@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/profile",
							"host": ["{{base_url}}"],
							"path": ["users", "profile"]
						}
					},
					"response": []
				},
				{
					"name": "Verify Phone Number",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/verify-phone",
							"host": ["{{base_url}}"],
							"path": ["users", "verify-phone"]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/verify-email",
							"host": ["{{base_url}}"],
							"path": ["users", "verify-email"]
						}
					},
					"response": []
				},
				{
					"name": "Complete Profile",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/complete-profile",
							"host": ["{{base_url}}"],
							"path": ["users", "complete-profile"]
						}
					},
					"response": []
				},
				{
					"name": "Suspend Current User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/suspend",
							"host": ["{{base_url}}"],
							"path": ["users", "suspend"]
						}
					},
					"response": []
				},
				{
					"name": "Activate Current User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/activate",
							"host": ["{{base_url}}"],
							"path": ["users", "activate"]
						}
					},
					"response": []
				},
				{
					"name": "Delete Current User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/account",
							"host": ["{{base_url}}"],
							"path": ["users", "account"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìç Address Management",
			"item": [
				{
					"name": "Create Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Address created successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.address_line_1).to.equal('456 Business Street');",
									"    pm.collectionVariables.set('address_id', response.id);",
									"    console.log('Address created:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"address_line_1\": \"456 Business Street\",\n  \"address_line_2\": \"Suite 100\",\n  \"city\": \"Lagos\",\n  \"state\": \"Lagos\",\n  \"postal_code\": \"100002\",\n  \"country\": \"NG\",\n  \"latitude\": 6.5244,\n  \"longitude\": 3.3792,\n  \"address_type\": \"WORK\",\n  \"is_default\": false,\n  \"delivery_instructions\": \"Call before delivery\",\n  \"landmark\": \"Near Central Bank\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/addresses",
							"host": ["{{base_url}}"],
							"path": ["users", "addresses"]
						}
					},
					"response": []
				},
				{
					"name": "Get User Addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Addresses returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    console.log('User addresses:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/addresses",
							"host": ["{{base_url}}"],
							"path": ["users", "addresses"]
						}
					},
					"response": []
				},
				{
					"name": "Get Address by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Address returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.equal(pm.collectionVariables.get('address_id'));",
									"    console.log('Address details:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/addresses/{{address_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "addresses", "{{address_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Update Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Address updated successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.address_line_1).to.equal('456 Business Street Updated');",
									"    console.log('Address updated:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"address_line_1\": \"456 Business Street Updated\",\n  \"city\": \"Lagos Updated\",\n  \"delivery_instructions\": \"Updated delivery instructions\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/addresses/{{address_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "addresses", "{{address_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Set Default Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Address set as default\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.is_default).to.be.true;",
									"    console.log('Default address set:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/addresses/{{address_id}}/default",
							"host": ["{{base_url}}"],
							"path": ["users", "addresses", "{{address_id}}", "default"]
						}
					},
					"response": []
				},
				{
					"name": "Get Default Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Default address returned\", function () {",
									"    const response = pm.response.json();",
									"    if (response) {",
									"        pm.expect(response.is_default).to.be.true;",
									"        console.log('Default address:', response);",
									"    } else {",
									"        console.log('No default address set');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/addresses/default",
							"host": ["{{base_url}}"],
							"path": ["users", "addresses", "default"]
						}
					},
					"response": []
				},
				{
					"name": "Validate Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Address validation result\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.isValid).to.be.a('boolean');",
									"    console.log('Address validation:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"address_line_1\": \"789 Test Street\",\n  \"city\": \"Test City\",\n  \"state\": \"Test State\",\n  \"postal_code\": \"12345\",\n  \"country\": \"NG\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/addresses/validate",
							"host": ["{{base_url}}"],
							"path": ["users", "addresses", "validate"]
						}
					},
					"response": []
				},
				{
					"name": "Delete Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Address deleted successfully\", function () {",
									"    console.log('Address deleted successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/addresses/{{address_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "addresses", "{{address_id}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üõí Cart Management",
			"item": [
				{
					"name": "Add Item to Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Item added to cart successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.menu_item_id).to.equal(pm.request.body.raw.menu_item_id);",
									"    pm.collectionVariables.set('cart_item_id', response.id);",
									"    console.log('Cart item added:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"menu_item_id\": \"{{menu_item_id}}\",\n  \"quantity\": 2\n}"
						},
						"url": {
							"raw": "{{base_url}}/cart/add",
							"host": ["{{base_url}}"],
							"path": ["cart", "add"]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cart returned successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.user_id).to.be.a('string');",
									"    pm.expect(response.items).to.be.an('array');",
									"    pm.expect(response.total_items).to.be.a('number');",
									"    pm.expect(response.subtotal).to.be.a('number');",
									"    console.log('Cart contents:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/cart",
							"host": ["{{base_url}}"],
							"path": ["cart"]
						}
					},
					"response": []
				},
				{
					"name": "Validate Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cart validation result\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.is_valid).to.be.a('boolean');",
									"    pm.expect(response.valid_items).to.be.an('array');",
									"    pm.expect(response.invalid_items).to.be.an('array');",
									"    console.log('Cart validation:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/cart/validate",
							"host": ["{{base_url}}"],
							"path": ["cart", "validate"]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart Item by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cart item returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.equal(pm.collectionVariables.get('cart_item_id'));",
									"    console.log('Cart item details:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/cart/items/{{cart_item_id}}",
							"host": ["{{base_url}}"],
							"path": ["cart", "items", "{{cart_item_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Update Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cart item updated successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.quantity).to.equal(3);",
									"    pm.expect(response.special_instructions).to.equal('Extra spicy please');",
									"    console.log('Cart item updated:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 3,\n  \"special_instructions\": \"Extra spicy please\",\n  \"customizations\": {\n    \"spice_level\": \"extra_hot\",\n    \"add_cheese\": true\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/cart/items/{{cart_item_id}}",
							"host": ["{{base_url}}"],
							"path": ["cart", "items", "{{cart_item_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Remove Item from Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Item removed from cart\", function () {",
									"    console.log('Cart item removed successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/cart/items/{{cart_item_id}}",
							"host": ["{{base_url}}"],
							"path": ["cart", "items", "{{cart_item_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Clear Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cart cleared successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.removed_count).to.be.a('number');",
									"    console.log('Cart cleared, items removed:', response.removed_count);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/cart",
							"host": ["{{base_url}}"],
							"path": ["cart"]
						}
					},
					"response": []
				},
				{
					"name": "Validate Cart for Checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checkout validation result\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.is_valid).to.be.a('boolean');",
									"    pm.expect(response.valid_items).to.be.an('array');",
									"    pm.expect(response.invalid_items).to.be.an('array');",
									"    pm.expect(response.errors).to.be.an('array');",
									"    console.log('Checkout validation:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/cart/validate-checkout",
							"host": ["{{base_url}}"],
							"path": ["cart", "validate-checkout"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üçΩÔ∏è Menu & Categories",
			"item": [
				{
					"name": "Categories",
					"item": [
						{
							"name": "Create Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Category created successfully\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.be.a('string');",
											"    pm.expect(response.name).to.equal('Main Dishes');",
											"    pm.collectionVariables.set('category_id', response.id);",
											"    console.log('Category created:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Main Dishes\",\n  \"description\": \"Delicious main course meals\",\n  \"sort_order\": 1,\n  \"is_active\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}/categories",
									"host": ["{{base_url}}"],
									"path": ["categories"]
								}
							},
							"response": []
						},
						{
							"name": "Get All Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Categories returned\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"    console.log('All categories:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/categories",
									"host": ["{{base_url}}"],
									"path": ["categories"]
								}
							},
							"response": []
						},
						{
							"name": "Get Active Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Active categories returned\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"    response.forEach(category => {",
											"        pm.expect(category.is_active).to.be.true;",
											"    });",
											"    console.log('Active categories:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/categories/active",
									"host": ["{{base_url}}"],
									"path": ["categories", "active"]
								}
							},
							"response": []
						},
						{
							"name": "Get Category by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Category returned\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.equal(pm.collectionVariables.get('category_id'));",
											"    console.log('Category details:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/categories/{{category_id}}",
									"host": ["{{base_url}}"],
									"path": ["categories", "{{category_id}}"]
								}
							},
							"response": []
						},
						{
							"name": "Update Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Category updated successfully\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.name).to.equal('Main Dishes Updated');",
											"    console.log('Category updated:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Main Dishes Updated\",\n  \"description\": \"Updated description for main dishes\",\n  \"sort_order\": 2\n}"
								},
								"url": {
									"raw": "{{base_url}}/categories/{{category_id}}",
									"host": ["{{base_url}}"],
									"path": ["categories", "{{category_id}}"]
								}
							},
							"response": []
						},
						{
							"name": "Upload Category Image",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/categories/{{category_id}}/image",
									"host": ["{{base_url}}"],
									"path": ["categories", "{{category_id}}", "image"]
								}
							},
							"response": []
						},
						{
							"name": "Upload Category Icon",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "icon",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/categories/{{category_id}}/icon",
									"host": ["{{base_url}}"],
									"path": ["categories", "{{category_id}}", "icon"]
								}
							},
							"response": []
						},
						{
							"name": "Delete Category",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/categories/{{category_id}}",
									"host": ["{{base_url}}"],
									"path": ["categories", "{{category_id}}"]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Menu Items",
					"item": [
						{
							"name": "Search Menu Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Search results returned\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.items).to.be.an('array');",
											"    pm.expect(response.total).to.be.a('number');",
											"    if (response.items.length > 0) {",
											"        pm.collectionVariables.set('menu_item_id', response.items[0].id);",
											"        console.log('First menu item ID saved:', response.items[0].id);",
											"    }",
											"    console.log('Search results:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/menu-items?query=chicken&min_price=10&max_price=50&is_available=true&page=1&limit=20&latitude=6.5244&longitude=3.3792&max_distance=10&prioritize_distance=true",
									"host": ["{{base_url}}"],
									"path": ["menu-items"],
									"query": [
										{
											"key": "query",
											"value": "chicken"
										},
										{
											"key": "min_price",
											"value": "10"
										},
										{
											"key": "max_price",
											"value": "50"
										},
										{
											"key": "is_available",
											"value": "true"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "latitude",
											"value": "6.5244"
										},
										{
											"key": "longitude",
											"value": "3.3792"
										},
										{
											"key": "max_distance",
											"value": "10"
										},
										{
											"key": "prioritize_distance",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Menu Item by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Menu item returned\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.equal(pm.collectionVariables.get('menu_item_id'));",
											"    console.log('Menu item details:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/menu-items/{{menu_item_id}}",
									"host": ["{{base_url}}"],
									"path": ["menu-items", "{{menu_item_id}}"]
								}
							},
							"response": []
						},
						{
							"name": "Get Vendor Menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Vendor menu returned\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"    console.log('Vendor menu:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/menu-items/vendor/{{vendor_id}}",
									"host": ["{{base_url}}"],
									"path": ["menu-items", "vendor", "{{vendor_id}}"]
								}
							},
							"response": []
						},
						{
							"name": "Get Category Menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Category menu returned\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"    console.log('Category menu:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/menu-items/category/{{category_id}}",
									"host": ["{{base_url}}"],
									"path": ["menu-items", "category", "{{category_id}}"]
								}
							},
							"response": []
						},
						{
							"name": "Create Menu Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Menu item created successfully\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.be.a('string');",
											"    pm.expect(response.name).to.equal('Chicken Burger');",
											"    pm.collectionVariables.set('menu_item_id', response.id);",
											"    console.log('Menu item created:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Chicken Burger\",\n  \"description\": \"Delicious grilled chicken burger with fresh vegetables\",\n  \"price\": 15.99,\n  \"category_id\": \"{{category_id}}\",\n  \"is_available\": true,\n  \"preparation_time_minutes\": 20,\n  \"ingredients\": [\"chicken breast\", \"lettuce\", \"tomato\", \"onion\", \"burger bun\"],\n  \"allergens\": [\"gluten\"],\n  \"dietary_info\": [\"non_vegetarian\"],\n  \"spice_level\": \"medium\",\n  \"customization_options\": {\n    \"spice_levels\": [\"mild\", \"medium\", \"hot\"],\n    \"add_ons\": [\"cheese\", \"bacon\", \"avocado\"]\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/menu-items",
									"host": ["{{base_url}}"],
									"path": ["menu-items"]
								}
							},
							"response": []
						},
						{
							"name": "Update Menu Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Menu item updated successfully\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.price).to.equal(17.99);",
											"    pm.expect(response.description).to.include('Updated');",
											"    console.log('Menu item updated:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Chicken Burger Deluxe\",\n  \"description\": \"Updated description for the deluxe chicken burger\",\n  \"price\": 17.99,\n  \"is_available\": true,\n  \"preparation_time_minutes\": 25\n}"
								},
								"url": {
									"raw": "{{base_url}}/menu-items/{{menu_item_id}}",
									"host": ["{{base_url}}"],
									"path": ["menu-items", "{{menu_item_id}}"]
								}
							},
							"response": []
						},
						{
							"name": "Delete Menu Item",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/menu-items/{{menu_item_id}}",
									"host": ["{{base_url}}"],
									"path": ["menu-items", "{{menu_item_id}}"]
								}
							},
							"response": []
						},
						{
							"name": "Toggle Menu Item Availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Availability toggled successfully\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.is_available).to.be.a('boolean');",
											"    console.log('Availability toggled:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"is_available\": false\n}"
								},
								"url": {
									"raw": "{{base_url}}/menu-items/{{menu_item_id}}/availability",
									"host": ["{{base_url}}"],
									"path": ["menu-items", "{{menu_item_id}}", "availability"]
								}
							},
							"response": []
						},
						{
							"name": "Bulk Update Menu Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Bulk update successful\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include('updated');",
											"    pm.expect(response.affected_count).to.be.a('number');",
											"    console.log('Bulk update result:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"UPDATE_CATEGORY\",\n  \"menu_item_ids\": [\"{{menu_item_id}}\"],\n  \"updates\": {\n    \"category_id\": \"{{category_id}}\",\n    \"is_available\": true\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/menu-items/bulk",
									"host": ["{{base_url}}"],
									"path": ["menu-items", "bulk"]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "üì¶ Orders",
			"item": [
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Order created successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.order_number).to.be.a('string');",
									"    pm.collectionVariables.set('order_id', response.id);",
									"    pm.collectionVariables.set('order_number', response.order_number);",
									"    console.log('Order created:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"delivery_address_id\": \"{{address_id}}\",\n  \"order_type\": \"DELIVERY\",\n  \"payment_method\": \"WALLET\",\n  \"use_cart_items\": true,\n  \"delivery_instructions\": \"Please call before delivery\",\n  \"vendor_notes\": \"Extra spicy please\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": ["{{base_url}}"],
							"path": ["orders"]
						}
					},
					"response": []
				},
				{
					"name": "Get Customer Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Customer orders returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.orders).to.be.an('array');",
									"    pm.expect(response.total).to.be.a('number');",
									"    console.log('Customer orders:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/orders?page=1&limit=20&order_status=NEW&sort_by=created_at&sort_order=DESC",
							"host": ["{{base_url}}"],
							"path": ["orders"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "order_status",
									"value": "NEW"
								},
								{
									"key": "sort_by",
									"value": "created_at"
								},
								{
									"key": "sort_order",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Order returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.equal(pm.collectionVariables.get('order_id'));",
									"    console.log('Order details:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/orders/{{order_id}}",
							"host": ["{{base_url}}"],
							"path": ["orders", "{{order_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Cancel Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Order cancelled successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.order_status).to.equal('CANCELLED');",
									"    console.log('Order cancelled:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reason\": \"Changed my mind\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/orders/{{order_id}}/cancel",
							"host": ["{{base_url}}"],
							"path": ["orders", "{{order_id}}", "cancel"]
						}
					},
					"response": []
				},
				{
					"name": "Get Customer Order Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Order stats returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.total_orders).to.be.a('number');",
									"    pm.expect(response.total_revenue).to.be.a('number');",
									"    console.log('Order stats:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/orders/stats",
							"host": ["{{base_url}}"],
							"path": ["orders", "stats"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üè™ Vendor Operations",
			"item": [
				{
					"name": "Vendor Profile",
					"item": [
						{
							"name": "Create Vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Vendor created successfully\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.be.a('string');",
											"    pm.expect(response.business_name).to.equal('My Restaurant');",
											"    pm.collectionVariables.set('vendor_id', response.id);",
											"    console.log('Vendor created:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "business_name",
											"value": "My Restaurant",
											"type": "text"
										},
										{
											"key": "business_description",
											"value": "Delicious food for everyone",
											"type": "text"
										},
										{
											"key": "business_type",
											"value": "RESTAURANT",
											"type": "text"
										},
										{
											"key": "contact_person_name",
											"value": "John Doe",
											"type": "text"
										},
										{
											"key": "contact_phone",
											"value": "+2348012345678",
											"type": "text"
										},
										{
											"key": "business_address",
											"value": "123 Business Street",
											"type": "text"
										},
										{
											"key": "business_city",
											"value": "Lagos",
											"type": "text"
										},
										{
											"key": "business_state",
											"value": "Lagos",
											"type": "text"
										},
										{
											"key": "business_country",
											"value": "NG",
											"type": "text"
										},
										{
											"key": "documents",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/vendor/apply",
									"host": ["{{base_url}}"],
									"path": ["vendor", "apply"]
								}
							},
							"response": []
						},
						{
							"name": "Get Vendor Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Vendor profile returned\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.be.a('string');",
											"    pm.expect(response.business_name).to.be.a('string');",
											"    console.log('Vendor profile:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/vendor/profile",
									"host": ["{{base_url}}"],
									"path": ["vendor", "profile"]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Vendor Orders",
					"item": [
						{
							"name": "Get Vendor Orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Vendor orders returned\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.orders).to.be.an('array');",
											"    pm.expect(response.total).to.be.a('number');",
											"    console.log('Vendor orders:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/vendor/orders?page=1&limit=20&order_status=NEW&sort_by=created_at&sort_order=DESC",
									"host": ["{{base_url}}"],
									"path": ["vendor", "orders"],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "order_status",
											"value": "NEW"
										},
										{
											"key": "sort_by",
											"value": "created_at"
										},
										{
											"key": "sort_order",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Order status updated successfully\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.order_status).to.equal('CONFIRMED');",
											"    console.log('Order status updated:', response);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order_status\": \"CONFIRMED\",\n  \"estimated_prep_time_minutes\": 30,\n  \"vendor_notes\": \"Order confirmed, will start preparing soon\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/vendor/orders/{{order_id}}/status",
									"host": ["{{base_url}}"],
									"path": ["vendor", "orders", "{{order_id}}", "status"]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "üì± Notifications",
			"item": [
				{
					"name": "Get User Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Notifications returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    console.log('User notifications:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/notifications?unreadOnly=false&limit=20&offset=0",
							"host": ["{{base_url}}"],
							"path": ["notifications"],
							"query": [
								{
									"key": "unreadOnly",
									"value": "false"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unread Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Unread count returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.count).to.be.a('number');",
									"    console.log('Unread notifications:', response.count);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/notifications/unread-count",
							"host": ["{{base_url}}"],
							"path": ["notifications", "unread-count"]
						}
					},
					"response": []
				},
				{
					"name": "Mark Notification as Read",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/notifications/{{notification_id}}/read",
							"host": ["{{base_url}}"],
							"path": ["notifications", "{{notification_id}}", "read"]
						}
					},
					"response": []
				},
				{
					"name": "Register Device Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Device token registered successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.token).to.be.a('string');",
									"    pm.collectionVariables.set('device_token_id', response.id);",
									"    console.log('Device token registered:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"device_push_token_here\",\n  \"platform\": \"ANDROID\",\n  \"deviceId\": \"device_123\",\n  \"deviceModel\": \"Samsung Galaxy S21\",\n  \"appVersion\": \"1.0.0\",\n  \"osVersion\": \"Android 12\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/notifications/register-device",
							"host": ["{{base_url}}"],
							"path": ["notifications", "register-device"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìÅ File Storage",
			"item": [
				{
					"name": "Upload General File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"File uploaded successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.url).to.be.a('string');",
									"    pm.collectionVariables.set('file_id', response.id);",
									"    console.log('File uploaded:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "category",
									"value": "GENERAL",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/upload",
							"host": ["{{base_url}}"],
							"path": ["upload"]
						}
					},
					"response": []
				},
				{
					"name": "Upload Menu Item Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Menu item image uploaded successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.be.a('string');",
									"    pm.expect(response.url).to.be.a('string');",
									"    console.log('Menu item image uploaded:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/menu-items/{{menu_item_id}}/image",
							"host": ["{{base_url}}"],
							"path": ["menu-items", "{{menu_item_id}}", "image"]
						}
					},
					"response": []
				},
				{
					"name": "Get File by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"File details returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.equal(pm.collectionVariables.get('file_id'));",
									"    pm.expect(response.url).to.be.a('string');",
									"    console.log('File details:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/upload/{{file_id}}",
							"host": ["{{base_url}}"],
							"path": ["upload", "{{file_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Delete File",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/upload/{{file_id}}",
							"host": ["{{base_url}}"],
							"path": ["upload", "{{file_id}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîß Admin Operations",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Users returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.users).to.be.an('array');",
									"    pm.expect(response.total).to.be.a('number');",
									"    console.log('All users:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/admin/users?page=1&limit=20&user_type=CUSTOMER&is_active=true&sort_by=created_at&sort_order=DESC",
							"host": ["{{base_url}}"],
							"path": ["admin", "users"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "user_type",
									"value": "CUSTOMER"
								},
								{
									"key": "is_active",
									"value": "true"
								},
								{
									"key": "sort_by",
									"value": "created_at"
								},
								{
									"key": "sort_order",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Vendors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Vendors returned\", function () {",
									"    pm.expect(response.vendors).to.be.an('array');",
									"    pm.expect(response.total).to.be.a('number');",
									"    console.log('All vendors:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/admin/vendors?page=1&limit=20&verification_status=PENDING&is_active=true&sort_by=created_at&sort_order=DESC",
							"host": ["{{base_url}}"],
							"path": ["admin", "vendors"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "verification_status",
									"value": "PENDING"
								},
								{
									"key": "is_active",
									"value": "true"
								},
								{
									"key": "sort_by",
									"value": "created_at"
								},
								{
									"key": "sort_order",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Vendor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Vendor verified successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.verification_status).to.equal('VERIFIED');",
									"    console.log('Vendor verified:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"verification_status\": \"VERIFIED\",\n  \"admin_notes\": \"All documents verified successfully\",\n  \"verification_date\": \"2024-01-15T10:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/vendors/{{vendor_id}}/verify",
							"host": ["{{base_url}}"],
							"path": ["admin", "vendors", "{{vendor_id}}", "verify"]
						}
					},
					"response": []
				},
				{
					"name": "Get System Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"System stats returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.total_users).to.be.a('number');",
									"    pm.expect(response.total_vendors).to.be.a('number');",
									"    pm.expect(response.total_orders).to.be.a('number');",
									"    console.log('System stats:', response);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/admin/stats",
							"host": ["{{base_url}}"],
							"path": ["admin", "stats"]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script to set up common variables",
					"if (!pm.collectionVariables.get('base_url')) {",
					"    pm.collectionVariables.set('base_url', 'http://localhost:3500/api/v1');",
					"    console.log('Base URL set to:', pm.collectionVariables.get('base_url'));",
					"}",
					"",
					"// Log current request details",
					"console.log('Request:', pm.request.method, pm.request.url);",
					"console.log('Headers:', pm.request.headers);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for common validations",
					"pm.test(\"Response time is less than 2000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"pm.test(\"Response has valid JSON\", function () {",
					"    pm.response.to.be.json;",
					"});",
					"",
					"// Log response details for debugging",
					"console.log('Response Status:', pm.response.status);",
					"console.log('Response Time:', pm.response.responseTime + 'ms');",
					"console.log('Response Size:', pm.response.size().body + ' bytes');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3500/api/v1",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_type",
			"value": "",
			"type": "string"
		},
		{
			"key": "otp_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "phone_number",
			"value": "+2348012345678",
			"type": "string"
		},
		{
			"key": "address_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "cart_item_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "category_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "menu_item_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "vendor_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "order_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "order_number",
			"value": "",
			"type": "string"
		},
		{
			"key": "notification_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "device_token_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "file_id",
			"value": "",
			"type": "string"
		}
	]
} 
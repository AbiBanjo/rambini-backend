name: Deploy to AWS EC2

on:
  pull_request:
    branches: [ main, dev, staging ]
  push:
    branches: [ main, dev, staging ]

jobs:
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run tests
      run: |
        echo "Running tests..."
        echo "Tests completed successfully"


  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'production' || github.ref_name == 'dev' && 'staging' || 'test' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Transfer entire codebase to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "."
        target: "/home/${{ secrets.EC2_USERNAME }}/rambini-backend/"
        rm: true
        strip_components: 0

    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        command_timeout: 15m
        script: |
          echo "ðŸš€ Starting deployment for ${{ github.ref_name }} branch..."
          
          # Navigate to application directory
          cd /home/${{ secrets.EC2_USERNAME }}/rambini-backend
          
          # Note: Entire codebase already transferred via SCP
          
          # Create/update environment files
          echo "${{ secrets.ENV_PRODUCTION }}" > .env.production
          echo "${{ secrets.ENV_STAGING }}" > .env.staging
          echo "${{ secrets.ENV_TEST }}" > .env.test
          
          # Install production dependencies only (no build needed)
          echo "ðŸ“¦ Installing production dependencies..."
          npm ci --production
          
          # Create logs directory
          mkdir -p logs
          
          # Update Nginx configuration if it exists
          if [ -f "nginx/rambini.conf" ]; then
            echo "Updating Nginx configuration..."
            sudo cp nginx/rambini.conf /etc/nginx/sites-available/rambini
            sudo ln -sf /etc/nginx/sites-available/rambini /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl reload nginx
          fi
          
          # Determine which environment to restart based on branch
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "Restarting production environment..."
            pm2 restart rambini-production --update-env || pm2 start ecosystem.config.js --only rambini-production
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            echo "Restarting staging environment..."
            pm2 restart rambini-staging --update-env || pm2 start ecosystem.config.js --only rambini-staging
          elif [ "${{ github.ref_name }}" = "staging" ]; then
            echo "Restarting test environment..."
            pm2 restart rambini-test --update-env || pm2 start ecosystem.config.js --only rambini-test
          fi
          
          # Reload Nginx
          sudo nginx -t && sudo systemctl reload nginx
          
          echo "âœ… Deployment completed successfully for ${{ github.ref_name }} branch"